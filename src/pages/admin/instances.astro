---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { redis } from '../../config/redis';

// Obtener la lista de IDs de teléfonos desde Redis
const phoneIds = await redis.smembers('phones');

// Obtener los detalles de cada teléfono
const phonesList = await Promise.all(
  phoneIds.map(async (id) => {
    const phoneData = await redis.get(id);
    if (phoneData) {
      const phone = JSON.parse(phoneData);
      return phone.celular;
    }
    return null;
  })
);

// Filtrar nulls y duplicados
const validPhones = phonesList.filter(
  (phone): phone is string => phone !== null
);

// Obtener el estado de las instancias
const state = (await redis.get('whatsapp:state')) || '{"instances":[]}';
const instanceState = JSON.parse(state);
---

<DashboardLayout title="Gestión de Instancias">
  <div class="space-y-6">
    <div class="flex justify-between items-center">
      <h1 class="text-2xl font-semibold text-gray-900">
        Gestión de Instancias
      </h1>
      <div class="text-sm text-gray-500">
        Total de instancias: {instanceState.instances.length}
      </div>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <h2 class="text-lg font-medium mb-4">Crear Nueva Instancia</h2>

      <div class="mb-6">
        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">
          Seleccionar Número de WhatsApp
        </label>
        <select
          id="phone"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="">Seleccione un número de WhatsApp</option>
          {
            validPhones.map((phone: string) => (
              <option value={phone}>
                {phone.replace(/(\d{2})(\d{2})(\d{4})(\d{4})/, '+$1 $2 $3-$4')}
              </option>
            ))
          }
        </select>
        <p class="mt-2 text-sm text-gray-500">
          Este número se usará para identificar la instancia en AWS Lightsail
        </p>
      </div>

      <button
        id="createInstance"
        class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 flex items-center space-x-2"
        disabled
      >
        <span>Crear Instancia</span>
        <svg
          id="loadingSpinner"
          class="animate-spin h-5 w-5 text-white hidden"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      </button>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-medium">Instancias Activas</h2>
        <button
          id="refreshTable"
          class="text-sm text-indigo-600 hover:text-indigo-700"
        >
          Actualizar lista
        </button>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Nombre
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                IP
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Estado
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Creado
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {
              instanceState.instances.map((instance: any) => (
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {instance.instanceName
                      ? instance.instanceName.replace('test-server-', '')
                      : 'N/A'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div class="flex items-center space-x-2">
                      <span>{instance.ip || 'Sin IP'}</span>
                      <button
                        class="text-indigo-600 hover:text-indigo-800"
                        style={instance.ip ? '' : 'display: none;'}
                        onclick={`navigator.clipboard.writeText('${instance.ip}')`}
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="h-4 w-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                          />
                        </svg>
                      </button>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span
                      class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        instance.state?.toLowerCase() === 'running'
                          ? 'bg-green-100 text-green-800'
                          : 'bg-yellow-100 text-yellow-800'
                      }`}
                    >
                      {instance.state || 'Desconocido'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {instance.created
                      ? new Date(instance.created).toLocaleString()
                      : 'N/A'}
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <div id="toast" class="fixed bottom-4 right-4 hidden">
    <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4">
      <p id="toastMessage" class="text-sm text-gray-600"></p>
    </div>
  </div>
</DashboardLayout>

<script>
  const phoneSelect = document.getElementById('phone') as HTMLSelectElement;
  const createButton = document.getElementById(
    'createInstance'
  ) as HTMLButtonElement;
  const loadingSpinner = document.getElementById(
    'loadingSpinner'
  ) as HTMLElement;
  const toast = document.getElementById('toast') as HTMLElement;
  const toastMessage = document.getElementById('toastMessage') as HTMLElement;

  // Función para actualizar la tabla
  async function refreshTable() {
    try {
      const response = await fetch('/api/state');
      const data = await response.json();
      if (data.instances) {
        window.location.reload();
      }
    } catch (error) {
      console.error('Error al actualizar la tabla:', error);
    }
  }

  // Botón de actualizar
  const refreshButton = document.getElementById('refreshTable');
  if (refreshButton) {
    refreshButton.addEventListener('click', refreshTable);
  }

  if (phoneSelect && createButton) {
    // Habilitar/deshabilitar botón según selección
    phoneSelect.addEventListener('change', () => {
      createButton.disabled = !phoneSelect.value;
    });
  }

  // Mostrar toast
  function showToast(message: string, isError = false) {
    if (toast && toastMessage) {
      toastMessage.textContent = message;
      toast.classList.remove('hidden');
      toast.classList.add(isError ? 'border-red-500' : 'border-green-500');
      setTimeout(() => {
        toast?.classList.add('hidden');
      }, 3000);
    }
  }

  if (createButton && phoneSelect && loadingSpinner) {
    // Manejar creación de instancia
    createButton.addEventListener('click', async () => {
      const phone = phoneSelect.value;
      if (!phone) return;

      // Mostrar estado de carga
      createButton.disabled = true;
      const spanElement = createButton.querySelector('span');
      if (spanElement) spanElement.textContent = 'Creando...';
      loadingSpinner.classList.remove('hidden');

      try {
        const response = await fetch('/api/create-instance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            numberphone: phone.replace(/\D/g, ''),
            provider: 'baileys', // O determinar el provider de otra manera
          }),
        });

        const data = await response.json();

        if (data.success) {
          showToast('Instancia creada exitosamente');
          setTimeout(() => window.location.reload(), 2000);
        } else {
          showToast(data.error || 'Error al crear la instancia', true);
        }
      } catch (error) {
        showToast('Error al crear la instancia', true);
      } finally {
        createButton.disabled = false;
        const spanElement = createButton.querySelector('span');
        if (spanElement) spanElement.textContent = 'Crear Instancia';
        loadingSpinner.classList.add('hidden');
      }
    });
  }

  // Copiar IP al portapapeles
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.closest('button[onclick^="navigator.clipboard"]')) {
      e.preventDefault();
      const button = target.closest('button');
      const ip = button?.previousElementSibling?.textContent;
      if (ip) {
        navigator.clipboard.writeText(ip);
        showToast('IP copiada al portapapeles');
      }
    }
  });
</script>
