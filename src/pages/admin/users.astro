---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { redis } from '../../config/redis';

interface User {
  username: string;
  email: string;
  createdAt: string;
  subscription?: {
    type: 'trial' | 'premium';
    expiresAt: string;
  };
}

// Obtener todos los usuarios de Redis
const userKeys = await redis.keys('user:*');
const users = await Promise.all(
  userKeys.map(async (key: string) => {
    const userData = await redis.get(key);
    if (userData) {
      const user = JSON.parse(userData) as User;
      return {
        ...user,
        key: key.replace('user:', ''), // Guardamos la key sin el prefijo para eliminar
      };
    }
    return null;
  })
);

// Filtrar usuarios nulos y ordenar por fecha de creación
const validUsers = users
  .filter((user): user is User & { key: string } => user !== null)
  .sort(
    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
  );
---

<DashboardLayout title="Gestión de Usuarios" allowedRole="admin">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Gestión de Usuarios</h1>
      <span class="text-sm text-gray-500">
        Total: {validUsers.length} usuarios
      </span>
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Usuario
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Email
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Fecha de Registro
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Suscripción
              </th>
              <th
                class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Acciones
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {
              validUsers.map((user) => (
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm font-medium text-gray-900">
                      {user.username}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-500">{user.email}</div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="text-sm text-gray-500">
                      {new Date(user.createdAt).toLocaleDateString()}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    {user.subscription ? (
                      <span
                        class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          user.subscription.type === 'premium'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}
                      >
                        {user.subscription.type}
                      </span>
                    ) : (
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                        Sin suscripción
                      </span>
                    )}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      class="text-red-600 hover:text-red-900 delete-user"
                      data-username={user.key}
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Modal de confirmación -->
  <div
    id="deleteModal"
    class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full"
  >
    <div
      class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
    >
      <div class="mt-3 text-center">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          Confirmar eliminación
        </h3>
        <div class="mt-2 px-7 py-3">
          <p class="text-sm text-gray-500">
            ¿Estás seguro de que deseas eliminar este usuario? Esta acción no se
            puede deshacer.
          </p>
        </div>
        <div class="items-center px-4 py-3">
          <button
            id="deleteConfirm"
            class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
          >
            Eliminar
          </button>
          <button
            id="deleteCancel"
            class="ml-3 px-4 py-2 bg-white text-gray-700 text-base font-medium rounded-md border shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            Cancelar
          </button>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  let userToDelete: string | null = null;
  const modal = document.getElementById('deleteModal');
  const deleteButtons = document.querySelectorAll('.delete-user');
  const confirmButton = document.getElementById('deleteConfirm');
  const cancelButton = document.getElementById('deleteCancel');

  // Mostrar modal
  deleteButtons.forEach((button) => {
    button.addEventListener('click', () => {
      userToDelete = button.getAttribute('data-username');
      if (modal) modal.classList.remove('hidden');
    });
  });

  // Cancelar eliminación
  cancelButton?.addEventListener('click', () => {
    if (modal) modal.classList.add('hidden');
    userToDelete = null;
  });

  // Confirmar eliminación
  confirmButton?.addEventListener('click', async () => {
    if (!userToDelete) return;

    try {
      const response = await fetch(`/api/users/${userToDelete}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        // Recargar la página para mostrar la lista actualizada
        window.location.reload();
      } else {
        console.error('Error al eliminar usuario');
      }
    } catch (error) {
      console.error('Error:', error);
    }

    if (modal) modal.classList.add('hidden');
  });
</script>

