---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { redis } from '../../config/redis';
import { verifyToken } from '../../services/auth';

// Definir la interfaz para las imágenes
interface ImageItem {
  name: string;
  url: string;
}

// Verificar autenticación
const token = Astro.cookies.get('client-token')?.value;
const user = token ? await verifyToken(token) : null;

if (!user) {
  return Astro.redirect('/login');
}

// Obtener el teléfono del usuario
const userPhoneKey = `user:${user.username}:phone`;
const phoneNumber = await redis.get(userPhoneKey);
let userPhone = null;

if (phoneNumber) {
  const phoneKey = `phone:${phoneNumber}`;
  const rawPhoneData = await redis.get(phoneKey);
  if (rawPhoneData) {
    userPhone = JSON.parse(rawPhoneData);
  }
}

// Obtener las imágenes del usuario desde la API de references
let imagesList: ImageItem[] = [];
if (userPhone?.celular) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/images/references?phoneNumber=${userPhone.celular}`);
    if (response.ok) {
      const data = await response.json();
      imagesList = data.data || [];
    }
  } catch (error) {
    console.error('Error al obtener imágenes:', error);
  }
}
---

<DashboardLayout title="Imágenes" allowedRole="client">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="bg-white rounded-lg shadow">
      <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          Gestor de Imágenes
        </h3>
        <p class="mt-1 text-sm text-gray-500">
          Sube y gestiona tus imágenes para WhatsApp
        </p>
      </div>

      <div class="px-4 py-5 sm:p-6">
        {
          !userPhone ? (
            <div class="text-center py-12">
              <p class="text-gray-500">
                Primero necesitas registrar un número de teléfono
              </p>
              <a
                href="/register-phone"
                class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700"
              >
                Registrar Número
              </a>
            </div>
          ) : (
            <div>
              <!-- Dropzone -->
              <div
                id="dropzone"
                class="mt-2 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md hover:border-indigo-500 transition-colors cursor-pointer"
              >
                <div class="space-y-1 text-center">
                  <svg
                    class="mx-auto h-12 w-12 text-gray-400"
                    stroke="currentColor"
                    fill="none"
                    viewBox="0 0 48 48"
                  >
                    <path
                      d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    />
                  </svg>
                  <div class="flex text-sm text-gray-600">
                    <label
                      for="file-upload"
                      class="relative cursor-pointer rounded-md font-medium text-indigo-600 hover:text-indigo-500"
                    >
                      <span>Sube un archivo</span>
                      <input
                        id="file-upload"
                        name="file-upload"
                        type="file"
                        class="sr-only"
                        accept="image/*"
                        multiple
                      />
                    </label>
                    <p class="pl-1">o arrastra y suelta</p>
                  </div>
                  <p class="text-xs text-gray-500">PNG, JPG hasta 10MB</p>
                </div>
              </div>

              <!-- Preview Modal -->
              <div
                id="preview-modal"
                class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden"
              >
                <div class="fixed inset-0 overflow-y-auto">
                  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                      <div class="space-y-4" id="preview-container">
                        <!-- Preview images will be inserted here -->
                      </div>
                      <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                        <button
                          type="button"
                          class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 sm:col-start-2"
                          id="upload-button"
                        >
                          Subir Imágenes
                        </button>
                        <button
                          type="button"
                          class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:col-start-1 sm:mt-0"
                          id="cancel-button"
                        >
                          Cancelar
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Download Button -->
              <button
                id="download-zip"
                class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 hidden"
              >
                Descargar imágenes en ZIP
              </button>
            </div>
          )
        }
      </div>
    </div>

    <!-- Sección de imágenes subidas -->
    <div class="mt-8">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Imágenes Subidas</h3>
      <div id="uploaded-images" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {imagesList.map((image: { name: string; url: string }) => (
          <div class="relative group image-container" data-url={image.url} data-name={image.name}>
            <img
              src={image.url}
              alt={image.name}
              class="w-full h-48 object-cover rounded-lg cursor-pointer"
            />
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-300 rounded-lg flex items-center justify-center">
              <div class="hidden group-hover:flex flex-col items-center space-y-2">
                <p class="image-name text-white text-sm">{image.name.replace(/\.[^/.]+$/, '')}</p>
                <div class="flex space-x-2">
                  <button class="edit-btn p-2 bg-white rounded-full hover:bg-gray-100">
                    <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button class="delete-btn p-2 bg-white rounded-full hover:bg-gray-100">
                    <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Modal de vista detallada -->
    <div id="image-detail-modal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50 flex items-center justify-center">
      <div class="max-w-4xl w-full mx-4 bg-white rounded-lg overflow-hidden shadow-xl">
        <div class="p-4 border-b border-gray-200 flex justify-between items-center">
          <input 
            type="text" 
            id="image-name-input"
            class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
          <div class="flex space-x-2 ml-4">
            <button id="save-name-btn" class="px-3 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
              Guardar
            </button>
            <button id="delete-image-btn" class="px-3 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
              Eliminar
            </button>
            <button id="close-detail-modal" class="p-2 hover:bg-gray-100 rounded-full">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        <div class="relative bg-gray-800 flex items-center justify-center" style="min-height: 60vh;">
          <img id="detail-image" class="max-h-[60vh] object-contain" src="" alt="" />
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script define:vars={{ userPhone, initialImages: imagesList }}>
  let imagesList = [...initialImages];
  let selectedFiles = [];
  let uploadedUrls = [];
  let currentImageData = null;

  // Elementos del DOM
  const dropzone = document.getElementById('dropzone');
  const fileInput = document.getElementById('file-upload');
  const modal = document.getElementById('preview-modal');
  const previewContainer = document.getElementById('preview-container');
  const uploadButton = document.getElementById('upload-button');
  const cancelButton = document.getElementById('cancel-button');
  const downloadButton = document.getElementById('download-zip');
  const detailModal = document.getElementById('image-detail-modal');
  const detailImage = document.getElementById('detail-image');
  const nameInput = document.getElementById('image-name-input');
  const saveNameBtn = document.getElementById('save-name-btn');
  const deleteImageBtn = document.getElementById('delete-image-btn');
  const closeDetailBtn = document.getElementById('close-detail-modal');

  // Función para mostrar imagen en detalle
  function showImageDetail(imageUrl, imageName, element) {
    currentImageData = { url: imageUrl, name: imageName, element };
    if (detailModal && detailImage && nameInput) {
      detailModal.classList.remove('hidden');
      detailImage.src = imageUrl;
      detailImage.alt = imageName;
      nameInput.value = imageName.replace(/\.[^/.]+$/, '');
    }
  }

  // Función para actualizar la galería
  function updateGallery(newImages = []) {
    const gallery = document.getElementById('uploaded-images');
    if (!gallery) return;

    if (newImages.length > 0) {
      imagesList = [...newImages, ...imagesList];
    }
    gallery.innerHTML = '';

    imagesList.forEach(image => {
      const div = document.createElement('div');
      div.className = 'relative group image-container';
      div.dataset.url = image.url;
      div.dataset.name = image.name;

      div.innerHTML = `
        <img
          src="${image.url}"
          alt="${image.name}"
          class="w-full h-48 object-cover rounded-lg cursor-pointer"
        />
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition-all duration-300 rounded-lg flex items-center justify-center">
          <div class="hidden group-hover:flex flex-col items-center space-y-2">
            <p class="image-name text-white text-sm">${image.name.replace(/\.[^/.]+$/, '')}</p>
            <div class="flex space-x-2">
              <button class="edit-btn p-2 bg-white rounded-full hover:bg-gray-100">
                <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </button>
              <button class="delete-btn p-2 bg-white rounded-full hover:bg-gray-100">
                <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      `;

      gallery.appendChild(div);

      // Añadir event listeners
      const editBtn = div.querySelector('.edit-btn');
      const deleteBtn = div.querySelector('.delete-btn');
      const img = div.querySelector('img');

      editBtn?.addEventListener('click', () => showImageDetail(image.url, image.name, div));
      deleteBtn?.addEventListener('click', async () => {
        if (confirm('¿Estás seguro de que deseas eliminar esta imagen?')) {
          await deleteImage(image.name, div);
        }
      });
      img?.addEventListener('click', () => showImageDetail(image.url, image.name, div));
    });
  }

  // Función para eliminar imagen
  async function deleteImage(imageName, container) {
    if (!userPhone?.celular) return;

    try {
      const response = await fetch('/api/images/references', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          phoneNumber: userPhone.celular,
          imageName: imageName
        })
      });

      if (!response.ok) throw new Error('Error al eliminar imagen');

      // Actualizar la lista de imágenes
      imagesList = imagesList.filter(img => img.name !== imageName);
      container.remove();

      if (detailModal) {
        detailModal.classList.add('hidden');
      }

      showToast('Imagen eliminada correctamente');
    } catch (error) {
      console.error('Error:', error);
      showToast('Error al eliminar la imagen', true);
    }
  }

  // Función para mostrar toast
  function showToast(message, isError = false) {
    const toast = document.createElement('div');
    toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg text-white ${
      isError ? 'bg-red-500' : 'bg-green-500'
    } transition-opacity duration-300`;
    toast.textContent = message;
    document.body.appendChild(toast);

    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }

  // Event listeners para el modal de detalle
  closeDetailBtn?.addEventListener('click', () => {
    if (detailModal) {
      detailModal.classList.add('hidden');
      currentImageData = null;
    }
  });

  // Cerrar modal con Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && detailModal) {
      detailModal.classList.add('hidden');
      currentImageData = null;
    }
  });

  // Inicializar la galería
  updateGallery();
</script> 